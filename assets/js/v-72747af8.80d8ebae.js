(self.webpackChunksisters_wudilib_docs=self.webpackChunksisters_wudilib_docs||[]).push([[66],{3573:(s,a,n)=>{"use strict";n.r(a),n.d(a,{data:()=>t});const t={key:"v-72747af8",path:"/lantu.html",title:"蓝图",lang:"zh-CN",frontmatter:{title:"蓝图",lang:"zh-CN"},excerpt:"",headers:[{level:2,title:"总结 WudiLib",slug:"总结-wudilib",children:[{level:3,title:"WudiLib 的优点",slug:"wudilib-的优点",children:[]},{level:3,title:"WudiLib 的不足",slug:"wudilib-的不足",children:[]}]},{level:2,title:"SDK 设计",slug:"sdk-设计",children:[{level:3,title:"Dispatcher",slug:"dispatcher",children:[]},{level:3,title:"反向 WebSocket 通信方式",slug:"反向-websocket-通信方式",children:[]}]},{level:2,title:"框架设计",slug:"框架设计",children:[]}],filePathRelative:"lantu.md"}},4042:(s,a,n)=>{"use strict";n.r(a),n.d(a,{default:()=>p});const t=(0,n(6252).uE)('<h1 id="蓝图"><a class="header-anchor" href="#蓝图">#</a> 蓝图</h1><p>我会在此介绍我心目中理想的 OneBot SDK 应有怎样的设计和实现。</p><h2 id="总结-wudilib"><a class="header-anchor" href="#总结-wudilib">#</a> 总结 WudiLib</h2><h3 id="wudilib-的优点"><a class="header-anchor" href="#wudilib-的优点">#</a> WudiLib 的优点</h3><p>WudiLib 在设计时预留了一定的接口，使得使用者可以根据需要进行扩展，并且可以适应较为广泛的应用场景。</p><p>没有引入无意义的依赖，也没有显著浪费资源的代码。</p><h3 id="wudilib-的不足"><a class="header-anchor" href="#wudilib-的不足">#</a> WudiLib 的不足</h3><h4 id="类名、api-名设计不佳"><a class="header-anchor" href="#类名、api-名设计不佳">#</a> 类名、API 名设计不佳</h4><p>我太不会起名字了……举个例子，各个消息的基类叫 <code>Message</code>，消息事件的基类也叫 <code>Message</code>，经常会出现冲突。</p><h4 id="可扩展性还有提升空间"><a class="header-anchor" href="#可扩展性还有提升空间">#</a> 可扩展性还有提升空间</h4><p>主要是事件的可扩展性。当前要扩展事件类型非常麻烦，而且还有很多限制。</p><h2 id="sdk-设计"><a class="header-anchor" href="#sdk-设计">#</a> SDK 设计</h2><p>分为 sender、receiver、dispatcher 三部分，sender 负责发送请求并返回响应，receiver 接收事件上报，dispatcher 负责解析事件。</p><h3 id="dispatcher"><a class="header-anchor" href="#dispatcher">#</a> Dispatcher</h3><p>sender 和 receiver 参考现有设计即可，关键是 dispatcher，这个东西并不存在于现在的 WudiLib 中。</p><h4 id="添加事件"><a class="header-anchor" href="#添加事件">#</a> 添加事件</h4><p>首先得收集所有事件类型的实体类，并且允许用户自定义添加。</p><p>用Attribute标明每一个类的条件，比如</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">IfField</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;message&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>\n<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Message</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Event</span></span> <span class="token punctuation">{</span> <span class="token punctuation">}</span> \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>表示如果 <code>type</code> 是 <code>message</code>，那就找 <code>Message</code> 相关的子类。</p><h5 id="基本限制-规定"><a class="header-anchor" href="#基本限制-规定">#</a> 基本限制（规定）：</h5><ul><li>如果子类和父类（包括间接的）标记了同一个字段，那必须相同。</li><li>子类比父类多标记的字段也应该受到限制。 <ul><li>严格版： <ul><li>每个类只能比父类多指定一个字段，并且一个事件类的直接派生类多指定的那个字段必须是同一个。</li></ul></li><li>宽松版（部分规定）： <ul><li>如果一个类派生了多个子类，并且其共同指定的字段完全相同，则一个类指定的字段必须是另一个的子集。</li><li>匹配时，指定字段多的优先匹配。</li></ul></li></ul></li></ul><p>例如：</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">IfField</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span></span><span class="token punctuation">,</span><span class="token class-name">IfField</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">SomeBase</span></span> <span class="token punctuation">{</span> <span class="token punctuation">}</span> \n<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">IfField</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span></span><span class="token punctuation">,</span><span class="token class-name">IfField</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;c&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span> <span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">SomeBase</span></span> <span class="token punctuation">{</span> <span class="token punctuation">}</span> \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>这就不行，因为如果上报同时包含了&quot;a&quot;, &quot;b&quot;, &quot;c&quot;，就会产生歧义。</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">IfField</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span></span><span class="token punctuation">,</span><span class="token class-name">IfField</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">SomeBase</span></span> <span class="token punctuation">{</span> <span class="token punctuation">}</span> \n<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">IfField</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span> <span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">SomeBase</span></span> <span class="token punctuation">{</span> <span class="token punctuation">}</span> \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>这就可以，优先匹配A。</p><p>之所以说这些，是想方便 bot 开发者处理未在 SDK 中定义的事件，并尽可能帮助他们减少误用。</p><p>数据结构和算法没想好。</p><h5 id="添加方式"><a class="header-anchor" href="#添加方式">#</a> 添加方式</h5><p>考虑API和直接使用反射查找两种方式。</p><h5 id="待定事项"><a class="header-anchor" href="#待定事项">#</a> 待定事项</h5><p>是否允许多次注册？</p><ul><li>禁止</li><li>按顺序处理</li></ul><h4 id="处理事件-添加事件处理器"><a class="header-anchor" href="#处理事件-添加事件处理器">#</a> 处理事件（添加事件处理器）</h4><p>可以考虑在 dispatcher 中提供类似这样的方法来注册事件处理器。</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token function">RegisterMessage</span><span class="token punctuation">(</span>Func<span class="token operator">&lt;</span><span class="token range operator">..</span><span class="token punctuation">.</span><span class="token punctuation">,</span> Task<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token generic-method"><span class="token function">RegisterEvent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>EventType<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>Func<span class="token operator">&lt;</span><span class="token range operator">..</span><span class="token punctuation">.</span><span class="token punctuation">,</span> Task<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token generic-method"><span class="token function">RegisterEvent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>EventType<span class="token punctuation">,</span> ResponseType<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>Func<span class="token operator">&lt;</span><span class="token range operator">..</span><span class="token punctuation">.</span><span class="token punctuation">,</span> Task<span class="token operator">&lt;</span>ResponseType<span class="token operator">&gt;&gt;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>方法名考虑“Register”或“Subscribe”开头。</p><h4 id="事件过滤器"><a class="header-anchor" href="#事件过滤器">#</a> 事件过滤器</h4><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token generic-method"><span class="token function">When</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>EventType<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>Func<span class="token operator">&lt;</span><span class="token range operator">..</span><span class="token punctuation">.</span><span class="token punctuation">,</span> Task<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">&gt;</span><span class="token operator">/</span><span class="token keyword">bool</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span><span class="token range operator">..</span><span class="token punctuation">.</span><span class="token punctuation">,</span> Func<span class="token operator">&lt;</span><span class="token range operator">..</span><span class="token punctuation">.</span><span class="token punctuation">,</span> Task<span class="token operator">/</span>Task<span class="token operator">&lt;</span>ResponseType<span class="token operator">&gt;&gt;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token generic-method"><span class="token function">When</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>EventType<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>Func<span class="token operator">&lt;</span><span class="token range operator">..</span><span class="token punctuation">.</span><span class="token punctuation">,</span> Task<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">&gt;</span><span class="token operator">/</span><span class="token keyword">bool</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Respond</span><span class="token punctuation">(</span><span class="token range operator">..</span><span class="token punctuation">.</span><span class="token punctuation">,</span> Func<span class="token operator">&lt;</span><span class="token range operator">..</span><span class="token punctuation">.</span><span class="token punctuation">,</span> Task<span class="token operator">&lt;</span>ResponseType<span class="token operator">&gt;&gt;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="反向-websocket-通信方式"><a class="header-anchor" href="#反向-websocket-通信方式">#</a> 反向 WebSocket 通信方式</h3><p>反向 WebSocket 通信应该可以正确处理多个连接的情况，甚至应该支持在不同的连接上启用不同的功能。</p><h2 id="框架设计"><a class="header-anchor" href="#框架设计">#</a> 框架设计</h2>',43),p={render:function(s,a){return t}}}}]);