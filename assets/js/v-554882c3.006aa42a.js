"use strict";(self.webpackChunksisters_wudilib_docs=self.webpackChunksisters_wudilib_docs||[]).push([[542],{7081:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-554882c3",path:"/zhinan/kuaisushangshou.html",title:"快速上手",lang:"zh-CN",frontmatter:{title:"快速上手",lang:"zh-CN",sidebar:[{isGroup:!0,text:"指南",children:["/zhinan/kuaisushangshou.md","/zhinan/jinjie-wudilib.md"]}]},excerpt:"",headers:[{level:2,title:"准备 go-cqhttp",slug:"准备-go-cqhttp",children:[]},{level:2,title:"新建项目并添加 nuget 包",slug:"新建项目并添加-nuget-包",children:[]},{level:2,title:"设置 OneBot API 并发送测试消息",slug:"设置-onebot-api-并发送测试消息",children:[]},{level:2,title:"配置消息监听",slug:"配置消息监听",children:[]},{level:2,title:"进阶内容",slug:"进阶内容",children:[]}],filePathRelative:"zhinan/kuaisushangshou.md"}},1097:(n,s,a)=>{a.r(s),a.d(s,{default:()=>K});var e=a(6252);const t=(0,e._)("h1",{id:"快速上手",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#快速上手","aria-hidden":"true"},"#"),(0,e.Uk)(" 快速上手")],-1),p=(0,e._)("p",null,"本页将指导您快速使用 go-cqhttp 建立起可以简单回应消息的机器人。",-1),o=(0,e._)("h2",{id:"准备-go-cqhttp",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#准备-go-cqhttp","aria-hidden":"true"},"#"),(0,e.Uk)(" 准备 go-cqhttp")],-1),c=(0,e.Uk)("下载最新版本的 "),l={href:"https://github.com/Mrs4s/go-cqhttp/releases",target:"_blank",rel:"noopener noreferrer"},u=(0,e.Uk)("go-cqhttp"),i=(0,e.Uk)("，然后运行，此时 go-cqhttp 将会生成配置文件并退出。打开生成的配置文件，按以下说明修改。"),r=(0,e.uE)('<p>在 <code>account</code> 节的 <code>uin</code> 和 <code>password</code> 字段填入机器人 QQ 号和密码。</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">account</span><span class="token punctuation">:</span>\n  <span class="token key atrule">uin</span><span class="token punctuation">:</span> <span class="token number">1233456</span> <span class="token comment"># QQ账号</span>\n  <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token string">&#39;mima&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>在 <code>servers</code> 节配置 HTTP 和 HTTP POST 通信方式</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">servers</span><span class="token punctuation">:</span>\n  <span class="token punctuation">-</span> <span class="token key atrule">http</span><span class="token punctuation">:</span>\n      <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost\n      <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">5700</span>\n      <span class="token key atrule">post</span><span class="token punctuation">:</span>\n        <span class="token punctuation">-</span> <span class="token key atrule">url</span><span class="token punctuation">:</span> <span class="token string">&#39;http://localhost:6700/&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div>',4),k={class:"custom-container tip"},d=(0,e._)("p",{class:"custom-container-title"},"提示",-1),b=(0,e.Uk)("除了 go-cqhttp，您还可以使用任何兼容的 "),m={href:"https://onebot.page.moe/ecosystem.html#onebot-%E5%AE%9E%E7%8E%B0",target:"_blank",rel:"noopener noreferrer"},h=(0,e.Uk)("OneBot 实现"),g=(0,e.Uk)("，这些实现的配置方式略有不同。如要使用，请查阅对应项目的文档。"),v=(0,e._)("p",null,"配置完毕后，再次启动 go-cqhttp，按提示处理登录认证，当出现群和好友数量时即为登录成功。当进行后面的步骤时，请确保 go-cqhttp 一直正常运行，不要关闭。",-1),y=(0,e._)("h2",{id:"新建项目并添加-nuget-包",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#新建项目并添加-nuget-包","aria-hidden":"true"},"#"),(0,e.Uk)(" 新建项目并添加 nuget 包")],-1),_=(0,e.Uk)("新建控制台项目，用 IDE 或命令行添加 nuget 包 "),w={href:"https://www.nuget.org/packages/Sisters.WudiLib",target:"_blank",rel:"noopener noreferrer"},f=(0,e.Uk)("Sisters.WudiLib"),U=(0,e.Uk)("。"),q=(0,e._)("h2",{id:"设置-onebot-api-并发送测试消息",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#设置-onebot-api-并发送测试消息","aria-hidden":"true"},"#"),(0,e.Uk)(" 设置 OneBot API 并发送测试消息")],-1),W={href:"https://docs.microsoft.com/zh-cn/dotnet/csharp/whats-new/csharp-7#async-main",target:"_blank",rel:"noopener noreferrer"},A=(0,e.Uk)("将 "),L=(0,e._)("code",null,"Main",-1),M=(0,e.Uk)(" 方法改为异步"),x=(0,e.Uk)("，然后添加下列代码，并将数字改为你的 QQ 号（不是机器人的）。"),S=(0,e.uE)('<div class="custom-container warning"><p class="custom-container-title">注意</p><p>请确保你已经添加机器人为好友，以接收私聊消息。</p></div><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">Sisters<span class="token punctuation">.</span>WudiLib</span><span class="token punctuation">;</span>\n\n<span class="token class-name"><span class="token keyword">var</span></span> httpApi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpApiClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nhttpApi<span class="token punctuation">.</span>ApiAddress <span class="token operator">=</span> <span class="token string">&quot;http://localhost:5700/&quot;</span><span class="token punctuation">;</span>\n<span class="token class-name"><span class="token keyword">var</span></span> privateResponse <span class="token operator">=</span> <span class="token keyword">await</span> httpApi<span class="token punctuation">.</span><span class="token function">SendPrivateMessageAsync</span><span class="token punctuation">(</span><span class="token number">12345678</span><span class="token punctuation">,</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>编译并执行程序，如果所有步骤都被正确完成，则你应该可以收到机器人发来的私聊消息。</p><h2 id="配置消息监听" tabindex="-1"><a class="header-anchor" href="#配置消息监听" aria-hidden="true">#</a> 配置消息监听</h2><p>消息监听可以让机器人收到消息或事件时进行处理。要监听并处理消息，需要先编写事件处理器的方法。</p><p>现在，让我们继续添加以下方法。</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">Sisters<span class="token punctuation">.</span>WudiLib<span class="token punctuation">.</span>Posts</span><span class="token punctuation">;</span>\n<span class="token keyword">using</span> <span class="token class-name">Message</span> <span class="token operator">=</span> <span class="token class-name">Sisters<span class="token punctuation">.</span>WudiLib<span class="token punctuation">.</span>SendingMessage</span><span class="token punctuation">;</span>\n<span class="token keyword">using</span> <span class="token class-name">MessageContext</span> <span class="token operator">=</span> <span class="token class-name">Sisters<span class="token punctuation">.</span>WudiLib<span class="token punctuation">.</span>Posts<span class="token punctuation">.</span>Message</span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">OnMessageAsync</span><span class="token punctuation">(</span><span class="token class-name">HttpApiClient</span> api<span class="token punctuation">,</span> <span class="token class-name">MessageContext</span> message<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>message<span class="token punctuation">.</span>Text <span class="token operator">==</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">await</span> api<span class="token punctuation">.</span><span class="token function">SendMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>Endpoint<span class="token punctuation">,</span> <span class="token string">&quot;Hello, WudiLib!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// Endpoint 代表消息接收/发送的节点。使用 Endpoint 可以让 bot 同时处理私聊和群聊消息，而无需分别编写代码。</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div>',7),E={class:"custom-container tip"},P=(0,e._)("p",{class:"custom-container-title"},"提示",-1),z=(0,e.Uk)("由于 "),C=(0,e._)("code",null,"Sisters.WudiLib.Message",-1),T=(0,e.Uk)(" 与 "),H=(0,e._)("code",null,"Sisters.WudiLib.Posts.Message",-1),O=(0,e.Uk)(" 常常出现命名冲突，同时 "),Q=(0,e._)("code",null,"Sisters.WudiLib.SendingMessage",-1),j=(0,e.Uk)(" 也是比 "),B=(0,e._)("code",null,"Sisters.WudiLib.Message",-1),R=(0,e.Uk)(" 更常用的类，此处使用 "),D={href:"https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/using-directive",target:"_blank",rel:"noopener noreferrer"},G=(0,e._)("em",null,"using 别名指令",-1),I=(0,e.Uk)("导入了这两个类。"),N=(0,e.uE)('<p>然后在 <code>Main</code> 方法中继续添加下列代码。</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> listener <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ApiPostListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nlistener<span class="token punctuation">.</span>ApiClient <span class="token operator">=</span> httpApi<span class="token punctuation">;</span> <span class="token comment">// 上面所示客户端的实例，将作为参数传给事件处理器，便于进行各种操作。</span>\nlistener<span class="token punctuation">.</span>PostAddress <span class="token operator">=</span> <span class="token string">&quot;http://localhost:6700/&quot;</span><span class="token punctuation">;</span>\nlistener<span class="token punctuation">.</span><span class="token function">StartListen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nlistener<span class="token punctuation">.</span>MessageEvent <span class="token operator">+=</span> <span class="token punctuation">(</span>api<span class="token punctuation">,</span> message<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">OnMessageAsync</span><span class="token punctuation">(</span>api<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetAwaiter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">await</span> Task<span class="token punctuation">.</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 阻止程序退出。</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>此时，我们已经配置好了处理器。运行程序并向 bot 发消息测试，当 bot 收到内容为“hello”的消息时，就会回复“Hello, WudiLib!”。</p><h2 id="进阶内容" tabindex="-1"><a class="header-anchor" href="#进阶内容" aria-hidden="true">#</a> 进阶内容</h2>',4),Z=(0,e.Uk)("请前往"),Y=(0,e.Uk)("进阶 WudiLib"),F=(0,e.Uk)(" 继续学习。"),J={},K=(0,a(3744).Z)(J,[["render",function(n,s){const a=(0,e.up)("OutboundLink"),J=(0,e.up)("RouterLink");return(0,e.wg)(),(0,e.iD)(e.HY,null,[t,p,o,(0,e._)("p",null,[c,(0,e._)("a",l,[u,(0,e.Wm)(a)]),i]),r,(0,e._)("div",k,[d,(0,e._)("p",null,[b,(0,e._)("a",m,[h,(0,e.Wm)(a)]),g])]),v,y,(0,e._)("p",null,[_,(0,e._)("a",w,[f,(0,e.Wm)(a)]),U]),q,(0,e._)("p",null,[(0,e._)("a",W,[A,L,M,(0,e.Wm)(a)]),x]),S,(0,e._)("div",E,[P,(0,e._)("p",null,[z,C,T,H,O,Q,j,B,R,(0,e._)("a",D,[G,(0,e.Wm)(a)]),I])]),N,(0,e._)("p",null,[Z,(0,e.Wm)(J,{to:"/zhinan/jinjie-wudilib.html"},{default:(0,e.w5)((()=>[Y])),_:1}),F])],64)}]])},3744:(n,s)=>{s.Z=(n,s)=>{for(const[a,e]of s)n[a]=e;return n}}}]);