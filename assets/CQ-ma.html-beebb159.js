import{_ as t,M as o,p as c,q as p,R as s,t as n,N as e,a1 as l}from"./framework-5866ffd3.js";const i={},r=s("h1",{id:"扩展-wudilib-cq-码",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#扩展-wudilib-cq-码","aria-hidden":"true"},"#"),n(" 扩展 WudiLib CQ 码")],-1),d={href:"https://onebot.page.moe/v11/specs/message/segment.html#xml-%E6%B6%88%E6%81%AF",target:"_blank",rel:"noopener noreferrer"},u=l(`<h2 id="手动构建相应的消息段" tabindex="-1"><a class="header-anchor" href="#手动构建相应的消息段" aria-hidden="true">#</a> 手动构建相应的消息段</h2><p>可以按照下面的方式构建 XML 消息。</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token return-type class-name">SendingMessage</span> <span class="token function">CreateXmlMessage</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> xmlData<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 构建 XML 消息段。</span>
    <span class="token class-name"><span class="token keyword">var</span></span> section <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Section</span><span class="token punctuation">(</span><span class="token string">&quot;xml&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&quot;data&quot;</span><span class="token punctuation">,</span> xmlData<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 从消息段构建消息。</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SendingMessage</span><span class="token punctuation">(</span>section<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中构建消息段时，如果要传入参数，可以通过一个或多个元组的方式（就像例子里那样），也可以通过包含参数列表的字典传入。</p><p>若要构建包含多个消息段的消息，可以对每个消息段分别构建一条消息，然后用 <code>+</code> 操作符连接。</p><h2 id="用原始消息字符串构建" tabindex="-1"><a class="header-anchor" href="#用原始消息字符串构建" aria-hidden="true">#</a> 用原始消息字符串构建</h2><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">RawMessage</span><span class="token punctuation">(</span><span class="token string">&quot;[CQ:xml,data=&lt;?xml ...]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,7),k={href:"https://onebot.page.moe/v11/specs/message/string.html",target:"_blank",rel:"noopener noreferrer"};function m(h,v){const a=o("ExternalLinkIcon");return c(),p("div",null,[r,s("p",null,[n("如果您想发送的 CQ 码类型不存在于 WudiLib 中，您可以手动构建相应的消息段，也可以用原始消息的方式直接发送。本文以 "),s("a",d,[n("XML 消息"),e(a)]),n("为例。")]),u,s("p",null,[n("直接用字符串构建需要考虑转义问题，如果采用这种方式，请查阅 OneBot 文档"),s("a",k,[n("字符串格式"),e(a)]),n("章节。")])])}const _=t(i,[["render",m],["__file","CQ-ma.html.vue"]]);export{_ as default};
