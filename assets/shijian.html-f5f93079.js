import{_ as n,p as s,q as a,a1 as e}from"./framework-5866ffd3.js";const t={},p=e(`<h1 id="扩展-wudilib-事件" tabindex="-1"><a class="header-anchor" href="#扩展-wudilib-事件" aria-hidden="true">#</a> 扩展 WudiLib 事件</h1><p>若要扩展 WudiLib 事件列表，需要定义数据类型，继承 <code>ApiPostListener</code> 类（或者子类），重写 <code>Response ProcessPost(JObject contentObject)</code> 方法。</p><h2 id="定义事件的数据类型" tabindex="-1"><a class="header-anchor" href="#定义事件的数据类型" aria-hidden="true">#</a> 定义事件的数据类型</h2><p>首先需要定义数据类型，根据事件类型不同，继承不同的类并添加缺失字段。同时需要 <code>override Endpoint</code> 以确保相关响应可以发送到正确的群或好友。以好友消息撤回为例：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">FriendRecallNotice</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Notice</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name">Endpoint</span> Endpoint <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PrivateEndpoint</span><span class="token punctuation">(</span>UserId<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 必须 override</span>

    <span class="token punctuation">[</span><span class="token function">JsonProperty</span><span class="token punctuation">(</span><span class="token string">&quot;message_id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">long</span></span> MessageId <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">提示</p><p><code>Post</code> 类中已经定义了 <code>time</code> 等字段，<code>Notice</code> 类定义了 <code>notice_type</code>，所以无需在此重复定义。</p></div><h2 id="添加事件处理路由" tabindex="-1"><a class="header-anchor" href="#添加事件处理路由" aria-hidden="true">#</a> 添加事件处理路由</h2><p>根据通信方式的不同，需要继承不同的类并重写相关方法。如果是 HTTP POST 方式，需要继承 <code>ApiPostListener</code>；正向 WebSocket 则需要继承 <code>CqHttpWebSocketEvent</code>。</p><p>可以重写的方法包括 <code>Response ProcessPost(JObject contentObject)</code>、<code>void ProcessMessage(JObject contentObject)</code>、<code>virtual void ProcessNotice(JObject contentObject)</code> 等，请根据扩展事件类型重写对应方法。如果匹配事件类型，则调用相关业务逻辑，并<strong>在未匹配时调用基类的同名方法</strong>。例如：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExtendedApiPostListener</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ApiPostListener</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token function">ExtendedApiPostListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span> <span class="token comment">// 添加构造方法</span>
    <span class="token keyword">public</span> <span class="token function">ExtendedApiPostListener</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> address<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span> <span class="token comment">// 添加构造方法</span>
    <span class="token keyword">public</span> <span class="token function">ExtendedApiPostListener</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> port<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span> <span class="token comment">// 添加构造方法</span>

    <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ProcessNotice</span><span class="token punctuation">(</span><span class="token class-name">JObject</span> contentObject<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>contentObject<span class="token punctuation">[</span><span class="token string">&quot;notice_type&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">ToObject</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">case</span> <span class="token string">&quot;friend_recall&quot;</span><span class="token punctuation">:</span>
                <span class="token function">ProcessFriendRecallNotice</span><span class="token punctuation">(</span>contentObject<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">ToObject</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>FriendRecallNotice<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">default</span><span class="token punctuation">:</span>
                <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">ProcessNotice</span><span class="token punctuation">(</span>contentObject<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 必须调用基类的方法</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10),c=[p];function o(i,l){return s(),a("div",null,c)}const d=n(t,[["render",o],["__file","shijian.html.vue"]]);export{d as default};
