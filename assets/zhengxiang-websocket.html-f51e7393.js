import{_ as t,M as e,p,q as o,R as n,t as s,N as c,a1 as i}from"./framework-5866ffd3.js";const l={},u=n("h1",{id:"正向-websocket",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#正向-websocket","aria-hidden":"true"},"#"),s(" 正向 WebSocket")],-1),k=n("p",null,"正向 WebSocket 可以用于业务服务器无法被连接，但是 OneBot 服务器可连接的情况，也可以与 HTTP 通信方式配合使用。",-1),r={href:"https://www.nuget.org/packages/Sisters.WudiLib.WebSocket/",target:"_blank",rel:"noopener noreferrer"},d=i(`<h2 id="配置正向-websocket-api" tabindex="-1"><a class="header-anchor" href="#配置正向-websocket-api" aria-hidden="true">#</a> 配置正向 WebSocket API</h2><p>下面是配置正向 WebSocket API 的示例。</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> httpApiClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CqHttpWebSocketApiClient</span><span class="token punctuation">(</span>
    <span class="token string">&quot;ws://your-ws-address/api&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;your-access-token&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建正向 WebSocket 通信客户端。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建之后，就可以访问各种 API，与其他方式没有很大区别。</p><div class="custom-container tip"><p class="custom-container-title">提示</p><p>无需手动连接 WebSocket，访问任意 API 时将自动连接。WebSocket 是持续连接的，也就是可以在同一连接多次访问 API。如果连接断开，所有未完成的请求会立即失败，并且不会立即重连，而是在下次请求时重连。</p></div><h2 id="配置正向-websocket-事件上报" tabindex="-1"><a class="header-anchor" href="#配置正向-websocket-事件上报" aria-hidden="true">#</a> 配置正向 WebSocket 事件上报</h2><p>下面是配置正向 WebSocket 事件上报的示例。</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> cqWebSocketEvent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CqHttpWebSocketEvent</span><span class="token punctuation">(</span>
    <span class="token string">&quot;ws://your-ws-address/event&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;your-access-token&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建 WebSocket 事件监听客户端。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>您可以像其他通信方式的事件上报那样设置对应的 API 客户端、注册事件处理器。</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>cqWebSocketEvent<span class="token punctuation">.</span>ApiClient <span class="token operator">=</span> httpApiClient<span class="token punctuation">;</span>

<span class="token comment">// 订阅事件。</span>
cqWebSocketEvent<span class="token punctuation">.</span>MessageEvent <span class="token operator">+=</span> <span class="token punctuation">(</span>api<span class="token punctuation">,</span> e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>Content<span class="token punctuation">.</span>Text<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
cqWebSocketEvent<span class="token punctuation">.</span>FriendRequestEvent <span class="token operator">+=</span> <span class="token punctuation">(</span>api<span class="token punctuation">,</span> e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
cqWebSocketEvent<span class="token punctuation">.</span>GroupInviteEvent <span class="token operator">+=</span> <span class="token punctuation">(</span>api<span class="token punctuation">,</span> e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 可以通过 return 的方式响应请求，与使用 HTTP 时没有差别。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外，WebSocket 事件上报的客户端同时有 <code>IsAvailable</code> 和 <code>IsListening</code> 两个属性，主要的区别是，连接中断后，重连成功前，<code>IsListening</code> 会返回 <code>true</code>，而 <code>IsAvailable</code> 会返回 <code>false</code>。</p><div class="custom-container tip"><p class="custom-container-title">提示</p><p>与正向 WebSocket API 客户端不同，事件上报需要手动开启监听，并且会自动重连。是否丢失重连过程中的事件取决于 OneBot 实现。</p></div><h2 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h2><p>此示例包含了简单的事件监听和处理，并观察 WudiLib 正向 WebSocket 的特点。</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> cqWebSocketEvent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CqHttpWebSocketEvent</span><span class="token punctuation">(</span>
    <span class="token string">&quot;ws://your-ws-address/event&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;your-access-token&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建 WebSocket 事件监听客户端。</span>
<span class="token class-name"><span class="token keyword">var</span></span> httpApiClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CqHttpWebSocketApiClient</span><span class="token punctuation">(</span>
    <span class="token string">&quot;ws://your-ws-address/event&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;your-access-token&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建 HTTP 通信客户端。</span>
cqWebSocketEvent<span class="token punctuation">.</span>ApiClient <span class="token operator">=</span> httpApiClient<span class="token punctuation">;</span>

<span class="token comment">// 订阅事件。</span>
cqWebSocketEvent<span class="token punctuation">.</span>MessageEvent <span class="token operator">+=</span> <span class="token punctuation">(</span>api<span class="token punctuation">,</span> e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>Content<span class="token punctuation">.</span>Text<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
cqWebSocketEvent<span class="token punctuation">.</span>FriendRequestEvent <span class="token operator">+=</span> <span class="token punctuation">(</span>api<span class="token punctuation">,</span> e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
cqWebSocketEvent<span class="token punctuation">.</span>GroupInviteEvent <span class="token operator">+=</span> <span class="token punctuation">(</span>api<span class="token punctuation">,</span> e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 可以通过 return 的方式响应请求，与使用 HTTP 时没有差别。</span>

<span class="token comment">// 每秒打印 WebSocket 状态。</span>
Task<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">await</span> Task<span class="token punctuation">.</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Available: {0}, Listening {1}&quot;</span><span class="token punctuation">,</span> cqWebSocketEvent<span class="token punctuation">.</span>IsAvailable<span class="token punctuation">,</span> cqWebSocketEvent<span class="token punctuation">.</span>IsListening<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 连接前等待 3 秒观察状态。</span>
Task<span class="token punctuation">.</span><span class="token function">Delay</span><span class="token punctuation">(</span>TimeSpan<span class="token punctuation">.</span><span class="token function">FromSeconds</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 连接（开始监听上报）。</span>
<span class="token class-name"><span class="token keyword">var</span></span> cancellationTokenSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CancellationTokenSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cqWebSocketEvent<span class="token punctuation">.</span><span class="token function">StartListen</span><span class="token punctuation">(</span>cancellationTokenSource<span class="token punctuation">.</span>Token<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 首次连接必须成功。</span>

<span class="token comment">// 按下回车会在 2 秒后断开，再过 3 秒使用新的 CancellationTokenSource 重连。</span>
<span class="token comment">// 您可以先断开网络，观察自动重连，再继续执行后面的代码。</span>
Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cancellationTokenSource<span class="token punctuation">.</span><span class="token function">CancelAfter</span><span class="token punctuation">(</span>TimeSpan<span class="token punctuation">.</span><span class="token function">FromSeconds</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Task<span class="token punctuation">.</span><span class="token function">Delay</span><span class="token punctuation">(</span>TimeSpan<span class="token punctuation">.</span><span class="token function">FromSeconds</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cancellationTokenSource<span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cancellationTokenSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CancellationTokenSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cqWebSocketEvent<span class="token punctuation">.</span><span class="token function">StartListen</span><span class="token punctuation">(</span>cancellationTokenSource<span class="token punctuation">.</span>Token<span class="token punctuation">)</span><span class="token punctuation">;</span>
Task<span class="token punctuation">.</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="与-http-方式配合" tabindex="-1"><a class="header-anchor" href="#与-http-方式配合" aria-hidden="true">#</a> 与 HTTP 方式配合</h2><p>正向 WebSocket 可以和 HTTP/HTTP POST 通信方式任意组合。</p>`,17);function v(b,m){const a=e("ExternalLinkIcon");return p(),o("div",null,[u,k,n("p",null,[s("要使用正向 WebSocket，您需要安装 nuget 包："),n("a",r,[s("Sisters.WudiLib.WebSocket"),c(a)]),s("。")]),d])}const S=t(l,[["render",v],["__file","zhengxiang-websocket.html.vue"]]);export{S as default};
